#lang datalog

#include "types.dl"
#include "opcode.dl"

.decl depends(x:Variable, y:Variable)

depends(x, y) :-
  def(x, stmt, _, x_cd, x_cn),
  use(y, stmt, _, _, x_cd, x_cn).

depends(x, z) :-
  depends(x, y),
  depends(y, z).

.decl CallOperator(target_val:Value, call_loc:number, call_cd:number, call_cn:number)
CallOperator(target_val, call_loc, call_cd, call_cn) :-
  (op_CALL(_, _, target_var, _, _, _, _, _, _, call_loc, call_cd, call_cn);
   op_STATICCALL(_, _, target_var, _, _, _, _, _, _, call_loc, call_cd, call_cn);
   op_DELEGATE(_, _, target_var, _, _, _, _, _, _, call_loc, call_cd, call_cn);
   op_CALLCODE(_, _, target_var, _, _, _, _, _, _, call_loc, call_cd, call_cn)),
  value(target_var, target_val).

.decl ReenResult(sload_loc: number, jumpi_loc:number, sload_depth:number, sload_call_number:number,	
	sstore_loc:number, sstore_depth:number, sstore_cn:number, sstore_sc_addr:Value, sload_sc_addr:Value)
.output ReenResult

ReenResult(sload_loc, jumpi_loc, sload_depth, sload_call_number, sstore_loc, sstore_depth, sstore_cn, sstore_sc_addr, sload_sc_addr):-
  op_SLOAD(_, sload_addr_var, sload_val_var, sload_loc, sload_depth, sload_call_number),
  sload_depth > 2,
  op_JUMPI(_, _, jumpi_cond_var, jumpi_loc, sload_depth, sload_call_number),
  depends(jumpi_cond_var, sload_val_var),

  op_SSTORE(_, sstore_addr_var, _, sstore_loc, sstore_depth, sstore_cn),
  sload_depth >= sstore_depth + 1,
  sstore_loc > sload_loc,
  value(sstore_addr_var, sstore_addr_var_val),
  value(sload_addr_var, sload_addr_var_val),
  sstore_addr_var_val = sload_addr_var_val,

  ((sstore_depth = 1,
   sc_addr(sstore_sc_addr));
   (sstore_depth != 1,
    CallOperator(sstore_sc_addr, _, sstore_depth-1 , call_cn),
    call_cn >= sstore_cn)
   ),

   CallOperator(sload_sc_addr, _, sload_depth-1 , call_cn),
   call_cn >= sload_call_number,

   sstore_sc_addr = sload_sc_addr.



